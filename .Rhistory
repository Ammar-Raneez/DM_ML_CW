}
set.seed(12345)
# function setup that creates 2 layer model
model_two_hidden_layers = function(hidden,sec_hidden) {
nn_model_true = neuralnet(usd_eur ~ previous_one_day_set_a, data=gbp_train, hidden=c(
hidden,sec_hidden), linear.output=TRUE)
train_results = compute(nn_model_true,gbp_test[,2:3])
truthcol = gbp_exchange_full[401:491,2]$usd_eur
predcol = unnormalize(train_results$net.result,gbp_min_train, gbp_max_train)[,1]
relevant_pred_stat(truthcol,predcol,
"Two Hidden Layers") %>%
mutate(hiddel_layers = paste0(hidden, " and ",sec_hidden),
input_set = "A") %>%
filter(.metric != "rsq")
}
# creation of different models with varying number of nodes
results_two_hidden_layers = bind_rows(
lapply(1:10, function(n) {
bind_rows(
lapply(1:5, function(m) {
model_two_hidden_layers(n,m)
})
)
})) %>%
janitor::clean_names()
# creation of different models with varying number of nodes
results_two_hidden_layers = bind_rows(
lapply(1:10, function(n) {
bind_rows(
lapply(1:5, function(m) {
model_two_hidden_layers(n,m)
})
)
})) %>%
janitor::clean_names()
model_two_hidden_layers(2, 2)
# function setup that creates 2 layer model
model_two_hidden_layers = function(hidden,sec_hidden) {
nn_model_true = neuralnet(usd_eur ~ previous_one_day, data=gbp_train, hidden=c(
hidden,sec_hidden), linear.output=TRUE)
train_results = compute(nn_model_true,gbp_test[,2:3])
truthcol = gbp_exchange_full[401:491,2]$usd_eur
predcol = unnormalize(train_results$net.result,gbp_min_train, gbp_max_train)[,1]
relevant_pred_stat(truthcol,predcol,
"Two Hidden Layers") %>%
mutate(hiddel_layers = paste0(hidden, " and ",sec_hidden),
input_set = "A") %>%
filter(.metric != "rsq")
}
# creation of different models with varying number of nodes
results_two_hidden_layers = bind_rows(
lapply(1:10, function(n) {
bind_rows(
lapply(1:5, function(m) {
model_two_hidden_layers(n,m)
})
)
})) %>%
janitor::clean_names()
View(results_two_hidden_layers)
# save the stat indices to a dataframe
set_a_models_two_layers = results_two_hidden_layers %>%
select(-estimator) %>%
pivot_wider(names_from = metric, values_from = estimate) %>%
arrange(rmse)
View(set_a_models_two_layers)
# Combine the dataframes
set_a_models = rbind(set_a_models_l,set_a_models_two_layers)
library(readxl)
library(factoextra)
library(NbClust)
library(caret)
library(ggplot2)
library(cluster)
# read in the data
vehicle_data <- read_excel("../../vehicles.xlsx")
# remove samples column due to it only being a counter
vehicle_data <- vehicle_data[c(-1)]
# data type
class(vehicle_data)
# data overview
summary(vehicle_data)
# any missing values?
sum(is.na(vehicle_data))
## DATA PREPROCESSING SECTION ##
# normalize the input features
scaled_vehicle_data <- apply(vehicle_data[-c(ncol(vehicle_data))], 2, scale)
# bind the class column back into the normalized data set
scaled_vehicle_data <- cbind(scaled_vehicle_data, vehicle_data[c(ncol(vehicle_data))])
# visualize outliers of data set
boxplot(scaled_vehicle_data[-c(ncol(vehicle_data))], las = 2, col = c("lightgreen", "lightblue"), ylab = "Normalized Values")
# Based on box plot, following columns have outliers
have_outliers <- c("Rad.Ra", "Pr.Axis.Ra", "Max.L.Ra", "Pr.Axis.Rect", "Sc.Var.Maxis", "Sc.Var.maxis", "Skew.Maxis", "Skew.maxis", "Kurt.maxis")
# loop through all the columns that have outliers
for (outlier in have_outliers) {
number_of_rows = nrow(scaled_vehicle_data)
# get quantile values - 25th and 75th percentiles
quant <- quantile(scaled_vehicle_data[, outlier], probs = c(0.25, 0.75))
# calculate IQR for the respective columns
iqr <- IQR(scaled_vehicle_data[1:number_of_rows, outlier])
# An outlier is a point below lower quartile and above upper quartile
upper_quartile <- quant[2] + 1.5*iqr
lower_quartile <- quant[1] - 1.5*iqr
# subset the data set, such that the outliers are filtered out
scaled_vehicle_data <- subset(
scaled_vehicle_data,
scaled_vehicle_data[c(-ncol(vehicle_data))][, outlier] > lower_quartile &
scaled_vehicle_data[c(-ncol(vehicle_data))][, outlier] < upper_quartile
)
}
# data set can now be split into input and output
scaled_vehicle_data_inputs <- scaled_vehicle_data[c(-ncol(vehicle_data))]
scaled_vehicle_data_output <- scaled_vehicle_data[c(ncol(vehicle_data))]
# plot box plot again to check whether outliers have been removed
boxplot(scaled_vehicle_data_inputs, las = 2, col = c("lightgreen", "lightblue"), ylab = "Normalized Values")
## KMEANS CLUSTER DEFINITION ##
# Manual
manual_cluster_size <- 4
# Elbow Method
fviz_nbclust(scaled_vehicle_data_inputs, kmeans, method = "wss") + labs(subtitle = "Elbow")
# Silhouette Method
fviz_nbclust(scaled_vehicle_data_inputs, kmeans, method = "silhouette") + labs(subtitle = "Silhouette")
# Gap statistic Method
fviz_nbclust(scaled_vehicle_data_inputs, kmeans, method = "gap_stat", verbose = F) + labs(subtitle = "Gap statistic")
# method of majority
NbClust(data = scaled_vehicle_data_inputs, distance = "euclidean", min.nc = 2, max.nc = 15, method = "kmeans")
## KMEANS ANALYSIS ##
# set seed for reproducible runs
set.seed(101)
# Manual
manual_kmean <- kmeans(scaled_vehicle_data_inputs, centers = manual_cluster_size, nstart = 50)
clusplot(scaled_vehicle_data, manual_kmean$cluster, color = T, shade = T, labels = 4)
clusplot(scaled_vehicle_data, manual_kmean$cluster, color = T, shade = T, labels = 4)
comparison_table_manual <- table(scaled_vehicle_data_output$Class, manual_kmean$cluster)
set.seed(102)
# Elbow and NbClust proposed 3 clusters
elbow_kmean <- kmeans(scaled_vehicle_data_inputs, centers = 3, nstart = 50)
clusplot(scaled_vehicle_data, elbow_kmean$cluster, color = T, shade = T, labels = 4)
comparison_table_elbow <- table(scaled_vehicle_data_output$Class, elbow_kmean$cluster)
set.seed(103)
# Silhouette & Gap Stat proposed 2 clusters
silhouette_gap_kmean <- kmeans(scaled_vehicle_data_inputs, centers = 2, nstart = 50)
clusplot(scaled_vehicle_data, silhouette_gap_kmean$cluster, color = T, shade = T, labels = 4)
comparison_table_silhouette_gap <- table(scaled_vehicle_data_output$Class, silhouette_gap_kmean$cluster)
## KMEANS EVALUATION ##
comparison_table_manual
# convert to factors, since confusion matrix expects factors
ground_truth_as_factor <- as.factor(scaled_vehicle_data_output$Class)
predictions_as_factor_manual <- as.factor(manual_kmean$cluster)
predictions_as_factor_elbow <- as.factor(elbow_kmean$cluster)
predictions_as_factor_sg <- as.factor(silhouette_gap_kmean$cluster)
# since the predictions comes out as 1,2,3,4, The categorical data of the ground truth is converted to numerical
ground_truth_as_numeric <- as.numeric(ground_truth_as_factor)
# the data type has to be changed back to factor, since CM can accept only factors
ground_truth_as_factor <- as.factor(ground_truth_as_numeric)
# plot confusion matrix for all
confusionMatrix(data = predictions_as_factor_manual, reference = ground_truth_as_factor, mode = 'prec_recall')
confusionMatrix(data = predictions_as_factor_elbow, reference = ground_truth_as_factor, mode = 'prec_recall')
confusionMatrix(data = predictions_as_factor_sg, reference = ground_truth_as_factor, mode = 'prec_recall')
fviz_cluster(scaled_vehicle_data, data = silhouette_gap_kmean$cluster,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
library(nnfor)
library(forecast)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
# required for scaling
exchange_data <- ts(exchange_data)
# after converting date to numeric convert back into data frame
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
## TWO HIDDEN LAYERS ##
perform_neuralnet_ar_two <- function(seed, order, new_col_name) {
# write a function to obtain the optimum order of AR(p) model #
# will create different input/output matrices, based on the specific order (the lag column changes)
# will then remove the unneeded date column, split the data into train and test sets, of fixed train set sizes
# will then create and train a neural net of internal conditions in control form, so only the input/output matrix would affect evaluation
# will then predict on the test set, and return the RMSE, MAE and MAPE of the predictions
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_1, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_1_hidden_2 <- perform_neuralnet_ar_two(104, 1, "rate_1")
order_2_hidden_2 <- perform_neuralnet_ar_two(104, 2, "rate_2")
## TWO HIDDEN LAYERS ##
perform_neuralnet_ar_two <- function(seed, order, new_col_name) {
# write a function to obtain the optimum order of AR(p) model #
# will create different input/output matrices, based on the specific order (the lag column changes)
# will then remove the unneeded date column, split the data into train and test sets, of fixed train set sizes
# will then create and train a neural net of internal conditions in control form, so only the input/output matrix would affect evaluation
# will then predict on the test set, and return the RMSE, MAE and MAPE of the predictions
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_2, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_2_hidden_2 <- perform_neuralnet_ar_two(104, 2, "rate_2")
## TWO HIDDEN LAYERS ##
perform_neuralnet_ar_two <- function(seed, order, new_col_name) {
# write a function to obtain the optimum order of AR(p) model #
# will create different input/output matrices, based on the specific order (the lag column changes)
# will then remove the unneeded date column, split the data into train and test sets, of fixed train set sizes
# will then create and train a neural net of internal conditions in control form, so only the input/output matrix would affect evaluation
# will then predict on the test set, and return the RMSE, MAE and MAPE of the predictions
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_3, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_3_hidden_2 <- perform_neuralnet_ar_two(104, 3, "rate_3")
## TWO HIDDEN LAYERS ##
perform_neuralnet_ar_two <- function(seed, order, new_col_name) {
# write a function to obtain the optimum order of AR(p) model #
# will create different input/output matrices, based on the specific order (the lag column changes)
# will then remove the unneeded date column, split the data into train and test sets, of fixed train set sizes
# will then create and train a neural net of internal conditions in control form, so only the input/output matrix would affect evaluation
# will then predict on the test set, and return the RMSE, MAE and MAPE of the predictions
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_4, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_4_hidden_2 <- perform_neuralnet_ar_two(104, 4, "rate_4")
## TWO HIDDEN LAYERS ##
perform_neuralnet_ar_two <- function(seed, order, new_col_name) {
# write a function to obtain the optimum order of AR(p) model #
# will create different input/output matrices, based on the specific order (the lag column changes)
# will then remove the unneeded date column, split the data into train and test sets, of fixed train set sizes
# will then create and train a neural net of internal conditions in control form, so only the input/output matrix would affect evaluation
# will then predict on the test set, and return the RMSE, MAE and MAPE of the predictions
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_5, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_4_hidden_2 <- perform_neuralnet_ar_two(104, 4, "rate_4")
order_5_hidden_2 <- perform_neuralnet_ar_two(104, 5, "rate_5")
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_2_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_2_shifted <- scaled_exchange_data_hidden_2_shifted[c(-1)]
train_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[0:400, ])
test_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[401:500, ])
perform_neuralnet_calculations_two <- function(seed, hidden, activation, learning) {
# write a function that will determine the best internal neural net structure and hyper parameters #
# will train on the input/output matrix of AR(1) and vary inner neural net values
# will then predict on the test set and return the RMSE, MAE, MAPE of the predictions
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_1, data = train_hidden_2, hidden = c(hidden, hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test_hidden_2)
rmse_nn_trial <- round(rmse(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 2 hidden layers
trial0_metrics <- perform_neuralnet_calculations_two(104, 2, "logistic", 0.08)
perform_neuralnet_calculations_two <- function(seed, hidden, activation, learning) {
# write a function that will determine the best internal neural net structure and hyper parameters #
# will train on the input/output matrix of AR(1) and vary inner neural net values
# will then predict on the test set and return the RMSE, MAE, MAPE of the predictions
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_2, data = train_hidden_2, hidden = c(hidden, hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test_hidden_2)
rmse_nn_trial <- round(rmse(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
trial1_metrics <- perform_neuralnet_calculations_two(104, 3, "logistic", 0.08)
perform_neuralnet_calculations_two <- function(seed, hidden, activation, learning) {
# write a function that will determine the best internal neural net structure and hyper parameters #
# will train on the input/output matrix of AR(1) and vary inner neural net values
# will then predict on the test set and return the RMSE, MAE, MAPE of the predictions
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_1, data = train_hidden_2, hidden = c(hidden, hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test_hidden_2)
rmse_nn_trial <- round(rmse(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test_hidden_2[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 2 hidden layers
trial0_metrics <- perform_neuralnet_calculations_two(104, 2, "logistic", 0.08)
trial1_metrics <- perform_neuralnet_calculations_two(104, 3, "logistic", 0.08)
trial2_metrics <- perform_neuralnet_calculations_two(104, 4, "logistic", 0.08)
trial3_metrics <- perform_neuralnet_calculations_two(104, 5, "logistic", 0.08)
trial4_metrics <- perform_neuralnet_calculations_two(104, 6, "logistic", 0.08)
trial5_metrics <- perform_neuralnet_calculations_two(104, 8, "logistic", 0.08)
# find best learning rate value for above best trial
trial6_metrics <- perform_neuralnet_calculations_two(104, 4, "logistic", 0.04)
trial7_metrics <- perform_neuralnet_calculations_two(104, 4, "logistic", 0.02)
trial8_metrics <- perform_neuralnet_calculations_two(104, 4, "logistic", 0.1)
# find optimal activation function for above best trial
trial9_metrics <- perform_neuralnet_calculations_two(104, 4, "tanh", 0.08)
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_5, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_1, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_1_hidden_1 <- perform_neuralnet_ar_one(104, 1, "rate_1")
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_2, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_2_hidden_1 <- perform_neuralnet_ar_one(104, 2, "rate_2")
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_3, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_3_hidden_1 <- perform_neuralnet_ar_one(104, 3, "rate_3")
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_4, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_4_hidden_1 <- perform_neuralnet_ar_one(104, 4, "rate_4")
## SINGLE HIDDEN LAYER ##
perform_neuralnet_ar_one <- function(seed, order, new_col_name) {
# write a function that does the same exact functionality as perform_neuralnet_ar_two()
# but with a single hidden layer
scaled_exchange_data_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = new_col_name, len = order, up = F)
scaled_exchange_data_shifted <- scaled_exchange_data_shifted[c(-1)]
train <- na.omit(scaled_exchange_data_shifted[0:400, ])
test_index = 400 + order
test <- na.omit(scaled_exchange_data_shifted[test_index:500, ])
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_5, data = train, hidden = c(6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
rmse_nn_trial <- round(rmse(test[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
order_5_hidden_1 <- perform_neuralnet_ar_one(104, 5, "rate_5")
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_1_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_1_shifted <- scaled_exchange_data_hidden_1_shifted[c(-1)]
train_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[0:400, ])
test_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[401:500, ])
perfom_neuralnet_calculations_one <- function(seed, hidden, activation, learning) {
# write a function that does the same exact functionality as perform_neuralnet_calculations_two()
# but with a single hidden layer
set.seed(seed)
nn_trial <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test_hidden_1)
rmse_nn_trial <- round(rmse(test_hidden_1[, 1], nn_trial.test_prediction), digits = 4)
mae_nn_trial <- round(mae(test_hidden_1[, 1], nn_trial.test_prediction), digits = 4)
mape_nn_trial <- round(mape(test_hidden_1[, 1], nn_trial.test_prediction), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 1 hidden layer
trial10_metrics <- perfom_neuralnet_calculations_one(104, 2, "logistic", 0.08)
trial11_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.08)
trial12_metrics <- perfom_neuralnet_calculations_one(104, 4, "logistic", 0.08)
trial13_metrics <- perfom_neuralnet_calculations_one(104, 5, "logistic", 0.08)
trial14_metrics <- perfom_neuralnet_calculations_one(104, 6, "logistic", 0.08)
trial15_metrics <- perfom_neuralnet_calculations_one(104, 8, "logistic", 0.08)
# find best learning rate value for above best trial
trial16_metrics <- perfom_neuralnet_calculations_one(104, 4, "logistic", 0.04)
trial17_metrics <- perfom_neuralnet_calculations_one(104, 4, "logistic", 0.02)
trial18_metrics <- perfom_neuralnet_calculations_one(104, 4, "logistic", 0.1)
# find optimal activation function for above best trial
trial19_metrics <- perfom_neuralnet_calculations_one(104, 4, "tanh", 0.08)
## BEST SINGLE HIDDEN LAYER NETWORK ##
set.seed(104)
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
plot(nn_best_single)
## BEST TWO HIDDEN LAYER NETWORK ##
set.seed(104)
nn_best_double <- neuralnet(formula = rate ~ rate_1, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2)
plot(nn_best_double)
## plot graph of best network ##
plot(test_hidden_1[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_single.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Single Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
plot(test_hidden_2[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Two Hidden Layers")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
