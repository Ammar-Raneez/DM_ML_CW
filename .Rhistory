df$Rate = df$`USD/EUR`
df_copy_ar2 = df
View(df_copy_ar2)
# Reading the data-set "vehicles.xlsx"
df = read_excel("../../ExchangeUSD.xlsx")
# Reading the data-set "vehicles.xlsx"
df = read_excel("../../ExchangeUSD.xlsx")
# Dropping unwanted columns
df = subset(df, select = -c(Wdy, `YYYY/MM/DD`))
df$Rate = df$`USD/EUR`
df_copy_ar2 = df
View(df)
# Renaming the Columns of the Data-frame
df = setNames(df, c("Rate_Original", "Rate_AR1"))
View(df)
# Shifting the Rate_AR1 column rows by one down below
df['Rate_AR1'] <- c(NA, head(df['Rate_AR1'], dim(df)[1] - 1)[[1]])
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = drop_na(df)
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = na.omit(df)
# normalization
normalize = function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# normalized data
df.normalized = data.frame(lapply(df, normalize))
View(df.normalized)
View(df.normalized)
# Creating the index colummn for the dataset
df.normalized$Index = seq.int(nrow(df))
View(df.normalized)
# Creating the Training Data
training_data = df.normalized[1:400,]
# Creating the Testing Data
testing_data = df.normalized[401:499,]
View(testing_data)
# Training a model on the data
set.seed(101)
View(training_data)
# Training the model
model <- neuralnet(Rate_Original~Rate_AR1,
# hidden=c(6),
hidden=c(6,6),
data = training_data,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.08)
testing_data_actual_rate = data.frame(testing_data$Rate_Original)
View(testing_data_actual_rate)
predict_result = predict(model, testing_data_actual_rate)
View(predict_result)
# Plotting the graph
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
predict_result = predict(model, testing_data)
View(predict_result)
# Plotting the graph
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
predict_result_2 = predict(model, testing_data_actual_rate)
View(predict_result)
View(predict_result_2)
View(testing_data)
# Reading the data-set "vehicles.xlsx"
df <- read_excel("../../ExchangeUSD.xlsx")
# Reading the data-set "vehicles.xlsx"
df <- read_excel("../../ExchangeUSD.xlsx")
# Dropping unwanted columns
df = subset(df, select = -c(Wdy, `YYYY/MM/DD`))
df$Rate = df$`USD/EUR`
df_copy_ar2 = df
# Renaming the Columns of the Data-frame
df = setNames(df, c("Rate_Original", "Rate_AR1"))
# Shifting the Rate_AR1 column rows by one down below
df['Rate_AR1'] <- c(NA, head(df['Rate_AR1'], dim(df)[1] - 1)[[1]])
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = na.omit(df)
# normalization
normalize = function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# normalized data
df.normalized = data.frame(lapply(df, normalize))
# Creating the index colummn for the dataset
df.normalized$Index = seq.int(nrow(df))
# Creating the Training Data
training_data = df.normalized[1:400,]
# Creating the Testing Data
testing_data = df.normalized[401:499,]
# Training a model on the data
set.seed(101)
# Training the model
model <- neuralnet(Rate_Original~Rate_AR1,
# hidden=c(6),
hidden=c(6,6),
data = training_data,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.08)
testing_data_actual_rate = data.frame(testing_data$Rate_Original)
View(testing_data)
View(testing_data_actual_rate)
predict_result = predict(model, testing_data)
predict_result_2 = predict(model, testing_data_actual_rate)
View(predict_result)
View(predict_result_2)
View(training_data)
View(df)
View(df.normalized)
View(df.normalized)
View(training_data)
View(df)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
View(exchange_data)
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
View(scaled_exchange_data)
data("AirPassengers")
x <- data("AirPassengers")
print(AirPassengers)
data("AirPassengers")
print(AirPassengers)
AR <- arima(AirPassengers, order = (1, 0, 0))
AR <- arima(AirPassengers, order = c(1, 0, 0))
View(AR)
ts.plot(AirPassengers)
AR_fit <- AirPassengers - residuals(AR)
points(AR_fit)
lines(AR_fit)
AR <- arima(AirPassengers, order = c(1, 0, 0))
ts.plot(AirPassengers)
AR_fit <- AirPassengers - residuals(AR)
lines(AR_fit)
lines(AR_fit, col = "red")
scaled_exchange_data <- as.ts(scaled_exchange_data)
AR <- arima(scaled_exchange_data, order = c(1, 0, 0))
View(scaled_exchange_data)
ts.plot(scaled_exchange_data)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
scaled_exchange_data <- as.ts(scaled_exchange_data)
AR <- arima(scaled_exchange_data, order = c(1, 0, 0))
ts.plot(scaled_exchange_data)
AR_fit <- scaled_exchange_data - residuals(AR)
scaled_exchange_data <- as.ts(scaled_exchange_data$rate)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.ts(scaled_exchange_data$rate)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
scaled_exchange_data <- as.ts(scaled_exchange_data$rate)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data, order = c(1, 0, 0))
ts.plot(scaled_exchange_data)
AR_fit <- scaled_exchange_data - residuals(AR)
lines(AR_fit, col = "red")
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[400:500,], order = c(1, 0, 0))
scaled_exchange_data
scaled_exchange_data[400]
scaled_exchange_data[400:500]
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[400:500], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[400:500])
AR_fit <- scaled_exchange_data[400:500] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR)
View(predicted)
View(exchange_data)
View(exchange_data)
scaled_exchange_data
predicted <- predict(AR, n.ahead = 100)
View(predicted)
ts.plot(scaled_exchange_data[400:500])
lines(predicted)
lines(predicted$pred)
predicted[["pred"]]
lines(predicted$pred, col = "red")
ts.plot(predicted$pred, col = "red")
scaled_exchange_data
AirPassengers
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:400])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 1)
ts.plot(scaled_exchange_data[400:500])
ts.plot(predicted$pred, col = "red")
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
predicted <- predict(AR, n.ahead = 2)
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
View(predicted)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
# plot(exchange_data[c(2)])
copy_a <- scaled_exchange_data
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
predicted <- predict(AR, n.ahead = 2)
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
View(copy_a)
predicted <- predict(AR, n.ahead = 100)
View(predicted)
predicted[["pred"]]
View(copy_a)
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
predicted <- predict(AR, n.ahead = 100)
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
# plot(exchange_data[c(2)])
copy_a <- scaled_exchange_data
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:400])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
lines(predicted, col = "red")
lines(predicted$pred, col = "red")
ts.plot(predicted$pred, col = "red")
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
# plot(exchange_data[c(2)])
copy_a <- scaled_exchange_data
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:400])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
ts.plot(scaled_exchange_data[400:500])
ts.plot(predicted$pred, col = "red")
lines(predicted$pred, col = "red")
ts.plot(scaled_exchange_data[400:500])
lines(predicted$pred, col = "red")
View(predicted)
predicted[["pred"]]
ts.plot(scaled_exchange_data[0:500])
lines(predicted$pred, col = "red")
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
# plot(exchange_data[c(2)])
copy_a <- scaled_exchange_data
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
lines(predicted$pred, col = "red")
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[400:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
lines(predicted$pred, col = "red")
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:500], order = c(1, 0, 0))
AR <- arima(scaled_exchange_data[0:500], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[400:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
lines(predicted$pred, col = "red")
AR <- arima(scaled_exchange_data[0:500], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
lines(predicted$pred, col = "red")
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot the rates to check whether stationary
# plot(exchange_data[c(2)])
copy_a <- scaled_exchange_data
scaled_exchange_data <- as.ts(scaled_exchange_data[, 2])
AR <- arima(scaled_exchange_data[0:500], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
AR <- arima(scaled_exchange_data[0:400], order = c(1, 0, 0))
ts.plot(scaled_exchange_data[0:500])
AR_fit <- scaled_exchange_data[0:400] - residuals(AR)
lines(AR_fit, col = "red")
predicted <- predict(AR, n.ahead = 100)
lines(predicted$pred, col = "red")
..
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
pacf(scaled_exchange_data[, 2])
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2], title(main = "Rate PACF"))
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2], title(main = "Rate PACF"))
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2)
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
title(main = "Rate PACF")
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
