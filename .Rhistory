two_hidden_layers[0]
two_hidden_layers[1]
two_hidden_layers[2]
two_hidden_layers[3]
two_hidden_layers
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- c(c(1, 1), c(2,2))
two_hidden_layers
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- c(list(1, 1), list(2,2))
two_hidden_layers
two_hidden_layers[q]
two_hidden_layers[1]
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- c(one = c(1, 1), 2 = c(2,2))
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- c(one = list(1, 1), 2 = list(2,2))
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- list(one = list(1, 1), 2 = list(2,2))
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- list(c(1, 1), c(2,2))
two_hidden_layers[1]
two_hidden_layers
two_hidden_layers[1]
two_hidden_layers[2]
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- list(c(1, 1), c(2, 2), c(3, 3), c(4, 4), c(5, 5), c(6, 6))
one_hidden_layer <- list(c(1,), c(2,), c(3,), c(4,), c(5,), c(6,))
one_hidden_layer <- list(c(1), c(2), c(3), c(4), c(5), c(6))
learning_rates <- list(0.01, 0.02, 0.04, 0.08)
activation_functions <- list("logistic", "tanh")
set.seed(101) # set a seed for reproducible neural networks
nn_trial1 <- neuralnet(rate ~ date, data = train,
hidden = two_hidden_layers[6],
act.fct = activation_functions[1],
err.fct = "sse",
lifesign = "full",
learningrate = learning_rates[4],
rep = 10,
linear.output = T)
activation_functions[1]
learning_rates
learning_rates[4]
learning_rates$0.08
nn_trial1 <- neuralnet(rate ~ date, data = train,
hidden = two_hidden_layers[6],
act.fct = activation_functions[1],
err.fct = "sse",
lifesign = "full",
learningrate = 0.08,
rep = 10,
linear.output = T)
nn_trial1 <- neuralnet(rate ~ date, data = train,
hidden = two_hidden_layers[6],
act.fct = "logistic",
err.fct = "sse",
lifesign = "full",
learningrate = 0.08,
rep = 10,
linear.output = T)
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial1 <- rmse(test[, 2], nn_trial1_test_prediction_df[, 2])
mae_nn_trial1 <- mae(test[, 2], nn_trial1_test_prediction_df[, 2])
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove second unneeded column
exchange_data <- exchange_data[c(-2)]
# convert date into time series
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the exchange rates
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins,
scale = maxs - mins))
# split into training and test
train <- scaled_exchange_data[0:400,]
test <- scaled_exchange_data[401:500,]
set.seed(101) # set a seed for reproducible neural networks
nn_trial1 <- neuralnet(rate ~ date, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial1.test_prediction <- predict(nn_trial1, test)
nn_trial1.train_prediction <- predict(nn_trial1, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial1_train_prediction_df <- data.frame(train[, 1], nn_trial1.train_prediction)
colnames(nn_trial1_train_prediction_df) <- c("date", "rate")
nn_trial1_test_prediction_df <- data.frame(test[, 1], nn_trial1.test_prediction)
colnames(nn_trial1_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial1 <- rmse(test[, 2], nn_trial1_test_prediction_df[, 2])
mae_nn_trial1 <- mae(test[, 2], nn_trial1_test_prediction_df[, 2])
mape_nn_trial1 <- mape(test[, 2], nn_trial1_test_prediction_df[, 2])
print("MAPE: " + mape_nn_trial1, "RMSE: " + rmse_nn_trial1, "MAE: " + mae_nn_trial1)
mape_nn_trial1
mape_nn_trial1[1]
as.integer(mape_nn_trial1)
as.integer(mape_nn_trial1[1])
as.character(mape_nn_trial1)
as.character(round(mape_nn_trial1, digits = 3))
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial1 <- as.character(round(rmse(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4))
print("MAPE: " + mape_nn_trial1)
print(mape_nn_trial1)
print(mape_nn_trial1, mae_nn_trial1)
print(c(mape_nn_trial1, mae_nn_trial1))
print(c(rmse_nn_trial1, mae_nn_trial1, mape_nn_trial1))
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial1 <- round(rmse(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
mae_nn_trial1 <- round(mae(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
mape_nn_trial1 <- round(mape(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
print(c(rmse_nn_trial1, mae_nn_trial1, mape_nn_trial1))
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove second unneeded column
exchange_data <- exchange_data[c(-2)]
# convert date into time series
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the exchange rates
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins,
scale = maxs - mins))
# split into training and test
train <- scaled_exchange_data[0:400,]
test <- scaled_exchange_data[401:500,]
# create the neural net and get predictions
# implement many neural networks with different hyper parameter values
# to find optimal value
two_hidden_layers <- list(c(3, 3), c(4, 4), c(5, 5), c(6, 6))
set.seed(101) # set a seed for reproducible neural networks
nn_trial1 <- neuralnet(rate ~ date, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_trial1.test_prediction <- predict(nn_trial1, test)
nn_trial1.train_prediction <- predict(nn_trial1, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial1_train_prediction_df <- data.frame(train[, 1], nn_trial1.train_prediction)
colnames(nn_trial1_train_prediction_df) <- c("date", "rate")
nn_trial1_test_prediction_df <- data.frame(test[, 1], nn_trial1.test_prediction)
colnames(nn_trial1_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial1 <- round(rmse(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
mae_nn_trial1 <- round(mae(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
mape_nn_trial1 <- round(mape(test[, 2], nn_trial1_test_prediction_df[, 2]), digits = 4)
print(c(rmse_nn_trial1, mae_nn_trial1, mape_nn_trial1))
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove second unneeded column
exchange_data <- exchange_data[c(-2)]
# convert date into time series
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the exchange rates
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins,
scale = maxs - mins))
# split into training and test
train <- scaled_exchange_data[0:400,]
test <- scaled_exchange_data[401:500,]
perfom_neuralnet_calculations_two <- function(seed, hidden, activation, learning) {
# set a seed for reproducible neural networks
set.seed(seed)
nn_trial <- neuralnet(rate ~ date, data = train, hidden = c(hidden, hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
nn_trial.train_prediction <- predict(nn_trial, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial_train_prediction_df <- data.frame(train[, 1], nn_trial.train_prediction)
colnames(nn_trial_train_prediction_df) <- c("date", "rate")
nn_trial_test_prediction_df <- data.frame(test[, 1], nn_trial.test_prediction)
colnames(nn_trial_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial <- round(rmse(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
trial1_metrics <- perfom_neuralnet_calculations_two(101, 6, "logistic", 0.08)
trial1_metrics
trial2_metrics <- perfom_neuralnet_calculations_two(102, 5, "logistic", 0.08)
trial2_metrics
trial1_metrics
trial3_metrics <- perfom_neuralnet_calculations_two(102, 4, "logistic", 0.08)
trial3_metrics <- perfom_neuralnet_calculations_two(102, 4, "logistic", 0.08)
trial2_metrics <- perfom_neuralnet_calculations_two(102, 5, "logistic", 0.08)
trial3_metrics <- perfom_neuralnet_calculations_two(103, 4, "logistic", 0.08)
trial3_metrics
trial2_metrics
trial1_metrics
trial4_metrics <- perfom_neuralnet_calculations_two(104, 3, "logistic", 0.08)
trial4_metrics
trial3_metrics
trial2_metrics
trial1_metrics
trial5_metrics <- perfom_neuralnet_calculations_two(105, 2, "logistic", 0.08)
trial5_metrics
# find best learning rate value for above best trial
trial6_metrics <- perfom_neuralnet_calculations_two(104, 3, "logistic", 0.08)
# find best learning rate value for above best trial, use same seed
trial6_metrics <- perfom_neuralnet_calculations_two(104, 3, "logistic", 0.04)
trial6_metrics
trial7_metrics <- perfom_neuralnet_calculations_two(104, 3, "logistic", 0.02)
trial7_metrics
# find best learning rate value for above best trial, use same seed
trial6_metrics <- perfom_neuralnet_calculations_two(106, 3, "logistic", 0.04)
trial7_metrics <- perfom_neuralnet_calculations_two(107, 3, "logistic", 0.02)
trial7_metrics
trial8_metrics <- perfom_neuralnet_calculations_two(108, 3, "logistic", 0.1)
# find optimal activation function
trial8_metrics <- perfom_neuralnet_calculations_two(109, 3, "tanh", 0.08)
trial4_metrics
trial8_metrics <- perfom_neuralnet_calculations_two(108, 3, "logistic", 0.1)
# find optimal activation function
trial9_metrics <- perfom_neuralnet_calculations_two(109, 3, "tanh", 0.08)
# Single hidden layer
perfom_neuralnet_calculations_one <- function(seed, hidden, activation, learning) {
# set a seed for reproducible neural networks
set.seed(seed)
# create the neural net and get predictions
nn_trial <- neuralnet(rate ~ date, data = train, hidden = c(hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
nn_trial.train_prediction <- predict(nn_trial, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial_train_prediction_df <- data.frame(train[, 1], nn_trial.train_prediction)
colnames(nn_trial_train_prediction_df) <- c("date", "rate")
nn_trial_test_prediction_df <- data.frame(test[, 1], nn_trial.test_prediction)
colnames(nn_trial_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial <- round(rmse(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 1 hidden layer
trial10_metrics <- perfom_neuralnet_calculations_one(101, 6, "logistic", 0.08)
trial11_metrics <- perfom_neuralnet_calculations_one(102, 5, "logistic", 0.08)
trial12_metrics <- perfom_neuralnet_calculations_one(103, 4, "logistic", 0.08)
trial13_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.08)
trial14_metrics <- perfom_neuralnet_calculations_one(105, 2, "logistic", 0.08)
# find best learning rate value for above best trial
trial15_metrics <- perfom_neuralnet_calculations_one(106, 3, "logistic", 0.04)
trial16_metrics <- perfom_neuralnet_calculations_one(107, 3, "logistic", 0.02)
trial17_metrics <- perfom_neuralnet_calculations_one(108, 3, "logistic", 0.1)
# find optimal activation function
trial18_metrics <- perfom_neuralnet_calculations_one(109, 3, "tanh", 0.08)
trial10_metrics
trial11_metrics
trial12_metrics
trial13_metrics
trial14_metrics
trial15_metrics
trial16_metrics
trial17_metrics
trial18_metrics
trial5_metrics
trial4_metrics
trial3_metrics
trial2_metrics
trial1_metrics
trial7_metrics
trial6_metrics
trial7_metrics
trial8_metrics
trial9_metrics
# best single hidden layer network, trial 13
set.seed(104)
nn_best_single <- neuralnet(rate ~ date, data = train, hidden = c(3), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test)
nn_best_single.train_prediction <- predict(nn_best_single, train)
nn_best_single_train_prediction_df <- data.frame(train[, 1], nn_best_single.train_prediction)
colnames(nn_best_single_train_prediction_df) <- c("date", "rate")
nn_best_single_test_prediction_df <- data.frame(test[, 1], nn_best_single.test_prediction)
colnames(nn_best_single_test_prediction_df) <- c("date", "rate")
plot(nn_best_single)
rmse_nn_trial <- round(rmse(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
# best 2 layer network: trial 4
set.seed(104)
nn_best_double <- neuralnet(rate ~ date, data = train, hidden = c(3, 3), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test)
nn_best_double.train_prediction <- predict(nn_best_double, train)
nn_best_double_train_prediction_df <- data.frame(train[, 1], nn_best_double.train_prediction)
colnames(nn_best_double_train_prediction_df) <- c("date", "rate")
nn_best_double_test_prediction_df <- data.frame(test[, 1], nn_best_double.test_prediction)
colnames(nn_best_double_test_prediction_df) <- c("date", "rate")
plot(nn_best_double)
View(nn_best_double_train_prediction_df)
plot(nn_best_double)
rmse_nn_trial <- round(rmse(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_single_train_prediction_df, type = "l", col = "gold")
lines(nn_best_single_test_prediction_df, type = "l", col = "red")
title("Actual VS Predicted")
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_single_train_prediction_df, type = "l", col = "gold")
lines(nn_best_single_test_prediction_df, type = "l", col = "red")
title("Actual VS Predicted")
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_double_train_prediction_df, type = "l", col = "gold")
lines(nn_best_double_test_prediction_df, type = "l", col = "red")
title("Actual VS Predicted")
# best 2 layer network: trial 4
set.seed(104)
nn_best_double <- neuralnet(rate ~ date, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test)
nn_best_double.train_prediction <- predict(nn_best_double, train)
nn_best_double_train_prediction_df <- data.frame(train[, 1], nn_best_double.train_prediction)
colnames(nn_best_double_train_prediction_df) <- c("date", "rate")
nn_best_double_test_prediction_df <- data.frame(test[, 1], nn_best_double.test_prediction)
colnames(nn_best_double_test_prediction_df) <- c("date", "rate")
plot(nn_best_double)
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_double_train_prediction_df, type = "l", col = "gold")
lines(nn_best_double_test_prediction_df, type = "l", col = "red")
rmse_nn_trial <- round(rmse(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
nn_best_double <- neuralnet(rate ~ date, data = train, hidden = c(3, 3), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test)
nn_best_double.train_prediction <- predict(nn_best_double, train)
nn_best_double_train_prediction_df <- data.frame(train[, 1], nn_best_double.train_prediction)
colnames(nn_best_double_train_prediction_df) <- c("date", "rate")
nn_best_double_test_prediction_df <- data.frame(test[, 1], nn_best_double.test_prediction)
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_double_train_prediction_df, type = "l", col = "gold")
lines(nn_best_double_test_prediction_df, type = "l", col = "red")
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove second unneeded column
exchange_data <- exchange_data[c(-2)]
# convert date into time series
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the exchange rates
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# split into training and test
train <- scaled_exchange_data[0:400,]
test <- scaled_exchange_data[401:500,]
# Two hidden layers
# implement many neural networks with different hyper parameter values
perfom_neuralnet_calculations_two <- function(seed, hidden, activation, learning) {
# set a seed for reproducible neural networks
set.seed(seed)
# create the neural net and get predictions
nn_trial <- neuralnet(rate ~ date, data = train, hidden = c(hidden, hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
nn_trial.train_prediction <- predict(nn_trial, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial_train_prediction_df <- data.frame(train[, 1], nn_trial.train_prediction)
colnames(nn_trial_train_prediction_df) <- c("date", "rate")
nn_trial_test_prediction_df <- data.frame(test[, 1], nn_trial.test_prediction)
colnames(nn_trial_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial <- round(rmse(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 2 hidden layers
trial1_metrics <- perfom_neuralnet_calculations_two(104, 6, "logistic", 0.08)
trial2_metrics <- perfom_neuralnet_calculations_two(104, 5, "logistic", 0.08)
trial3_metrics <- perfom_neuralnet_calculations_two(104, 4, "logistic", 0.08)
trial4_metrics <- perfom_neuralnet_calculations_two(104, 3, "logistic", 0.08)
trial5_metrics <- perfom_neuralnet_calculations_two(104, 2, "logistic", 0.08)
# find optimal number of nodes for 2 hidden layers
trial0_metrics <- perfom_neuralnet_calculations_two(104, 8, "logistic", 0.08)
# find best learning rate value for above best trial, use same seed
trial6_metrics <- perfom_neuralnet_calculations_two(104, 6, "logistic", 0.04)
trial7_metrics <- perfom_neuralnet_calculations_two(104, 6, "logistic", 0.02)
trial8_metrics <- perfom_neuralnet_calculations_two(104, 6, "logistic", 0.1)
# find optimal activation function
trial9_metrics <- perfom_neuralnet_calculations_two(104, 6, "tanh", 0.08)
# find optimal activation function
trial9_metrics <- perfom_neuralnet_calculations_two(104, 6, "tanh", 0.08)
# find optimal activation function
trial9_metrics <- perfom_neuralnet_calculations_two(104, 6, "sigmoid", 0.08)
# find optimal activation function
trial9_metrics <- perfom_neuralnet_calculations_two(104, 6, "tanh", 0.1)
trial8_metrics <- perfom_neuralnet_calculations_two(104, 6, "logistic", 0.1)
# find optimal number of nodes for 1 hidden layer
trial1x_metrics <- perfom_neuralnet_calculations_one(104, 8, "logistic", 0.08)
# Single hidden layer
perfom_neuralnet_calculations_one <- function(seed, hidden, activation, learning) {
# set a seed for reproducible neural networks
set.seed(seed)
# create the neural net and get predictions
nn_trial <- neuralnet(rate ~ date, data = train, hidden = c(hidden), act.fct = activation, err.fct = "sse", lifesign = "full", learningrate = learning, rep = 10, linear.output = T)
nn_trial.test_prediction <- predict(nn_trial, test)
nn_trial.train_prediction <- predict(nn_trial, train)
# convert the predictions into a data frame with the date column for plotting
nn_trial_train_prediction_df <- data.frame(train[, 1], nn_trial.train_prediction)
colnames(nn_trial_train_prediction_df) <- c("date", "rate")
nn_trial_test_prediction_df <- data.frame(test[, 1], nn_trial.test_prediction)
colnames(nn_trial_test_prediction_df) <- c("date", "rate")
# evaluations using RMSE, MAE and MAPE
rmse_nn_trial <- round(rmse(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_trial_test_prediction_df[, 2]), digits = 4)
return(c(rmse_nn_trial, mae_nn_trial, mape_nn_trial))
}
# find optimal number of nodes for 1 hidden layer
trial1x_metrics <- perfom_neuralnet_calculations_one(104, 8, "logistic", 0.08)
trial10_metrics <- perfom_neuralnet_calculations_one(104, 6, "logistic", 0.08)
trial11_metrics <- perfom_neuralnet_calculations_one(104, 5, "logistic", 0.08)
trial12_metrics <- perfom_neuralnet_calculations_one(104, 4, "logistic", 0.08)
trial13_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.08)
trial14_metrics <- perfom_neuralnet_calculations_one(104, 2, "logistic", 0.08)
trial10_metrics <- perfom_neuralnet_calculations_one(104, 6, "logistic", 0.08)
# find best learning rate value for above best trial
trial15_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.04)
trial16_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.02)
trial17_metrics <- perfom_neuralnet_calculations_one(104, 3, "logistic", 0.1)
# find optimal activation function
trial18_metrics <- perfom_neuralnet_calculations_one(104, 3, "tanh", 0.08)
# best single hidden layer network, trial 13
set.seed(104)
nn_best_single <- neuralnet(rate ~ date, data = train, hidden = c(3), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test)
nn_best_single.train_prediction <- predict(nn_best_single, train)
nn_best_single_train_prediction_df <- data.frame(train[, 1], nn_best_single.train_prediction)
colnames(nn_best_single_train_prediction_df) <- c("date", "rate")
nn_best_single_test_prediction_df <- data.frame(test[, 1], nn_best_single.test_prediction)
colnames(nn_best_single_test_prediction_df) <- c("date", "rate")
plot(nn_best_single)
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_single_train_prediction_df, type = "l", col = "gold")
lines(nn_best_single_test_prediction_df, type = "l", col = "red")
# best 2 layer network: trial 4
set.seed(104)
nn_best_double <- neuralnet(rate ~ date, data = train, hidden = c(6, 6), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test)
nn_best_double.train_prediction <- predict(nn_best_double, train)
nn_best_double_train_prediction_df <- data.frame(train[, 1], nn_best_double.train_prediction)
colnames(nn_best_double_train_prediction_df) <- c("date", "rate")
nn_best_double_test_prediction_df <- data.frame(test[, 1], nn_best_double.test_prediction)
colnames(nn_best_double_test_prediction_df) <- c("date", "rate")
plot(nn_best_double)
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_double_train_prediction_df, type = "l", col = "gold")
lines(nn_best_double_test_prediction_df, type = "l", col = "red")
title("Actual VS Predicted")
rmse_nn_trial <- round(rmse(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_best_single_test_prediction_df[, 2]), digits = 4)
rmse_nn_trial <- round(rmse(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mae_nn_trial <- round(mae(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
mape_nn_trial <- round(mape(test[, 2], nn_best_double_test_prediction_df[, 2]), digits = 4)
plot(nn_best_double)
plot(nn_best_single)
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue")
lines(nn_best_double_train_prediction_df, type = "l", col = "gold")
lines(nn_best_double_test_prediction_df, type = "l", col = "red")
title("Actual VS Predicted")
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue", lwd = 5)
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue", lwd = 2)
lines(nn_best_double_train_prediction_df, type = "l", col = "gold", lwd = 2)
lines(nn_best_double_test_prediction_df, type = "l", col = "red", lwd = 2)
# plot graph of best network
plot(scaled_exchange_data, type = "l", col = "lightblue", lwd = 2)
lines(nn_best_single_train_prediction_df, type = "l", col = "gold", lwd = 2)
lines(nn_best_single_test_prediction_df, type = "l", col = "red", lwd = 2)
