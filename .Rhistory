pacf(scaled_exchange_data[, 2], title(main = "Rate PACF"))
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2], title(main = "Rate PACF"))
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2)
# plot pacf plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
title(main = "Rate PACF")
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_2_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_2_shifted <- scaled_exchange_data_hidden_2_shifted[c(-1)]
train_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[0:400, ])
test_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[401:500, ])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_1_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_1_shifted <- scaled_exchange_data_hidden_1_shifted[c(-1)]
train_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[0:400, ])
test_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[401:500, ])
### BEST SINGLE HIDDEN LAYER NETWORK
set.seed(104)
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
View(nn_best_single)
nn_best_single.test_prediction <- predict(nn_best_single)
test_hidden_2
test_hidden_2[1]
test_hidden_2[,2]
test_hidden_2[,2:1]
test_hidden_2[,2]
test_hidden_2[,1:!]
test_hidden_2[,1:1]
test_hidden_2[,1]
test_hidden_2[,1]
test_hidden_2[[,1]]
test_hidden_2[[1]]
test_hidden_2[[1:1]]
test_hidden_2$rate_1[[1]]
View(test_hidden_2)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2)
test_hidden_1$rate_1[[1]]
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
View(nn_best_single.test_prediction)
View(scaled_exchange_data)
View(train_hidden_1)
plot(test_hidden_1[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
View(test_hidden_1)
View(test_hidden_2)
lines(nn_best_single.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Single Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
nn_best_single.test_prediction <- c()
View(nn_best_single)
nn_best_single.test_prediction <- c()
for (i in 1:100) {
nn_best_single.test_prediction <- c(nn_best_single.test_prediction, predict(nn_best_single, test_hidden_1$rate_1[[i]]))
}
test_hidden_1$rate_1[[i]]
nn_best_single.test_prediction <- c()
for (i in 1:100) {
nn_best_single.test_prediction <- c(nn_best_single.test_prediction, predict(nn_best_single, as.data.frame(test_hidden_1$rate_1[[i]])))
}
nn_best_single.test_prediction <- c()
for (i in 1:100) {
nn_best_single.test_prediction <- c(nn_best_single.test_prediction, predict(nn_best_single, test_hidden_1$rate_1[[i]]))
}
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = 4)
library(forecast)
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = 4)
scaled_exchange_data_ts <- as.ts(scaled_exchange_data[, 2])
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = 4)
plot(forecast(n.net, h = 100))
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = (4, 4))
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = (4))
plot(forecast(n.net, h = 100))
n.net <- nnetar(window(scaled_exchange_data_ts), p = 1, size = 4)
plot(forecast(n.net, h = 100))
scaled_exchange_data_ts[1:400]
n.net <- nnetar(window(scaled_exchange_data_ts[1:400]), p = 1, size = 4)
plot(forecast(n.net, h = 100))
lines(scaled_exchange_data[400:500])
lines(scaled_exchange_data_ts[400:500])
lines(scaled_exchange_data_ts[0:500])
n.net <- nnetar(window(scaled_exchange_data_ts[1:400]), p = 1, size = 4)
plot(forecast(n.net, h = 100))
lines(scaled_exchange_data_ts[0:500])
plot(n.net)
View(n.net)
View(nn_best_single)
plot(n.net$model)
nn_best_double <- neuralnet(data = scaled_exchange_data_ts[1:400], hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
set.seed(104)
nn_best_double <- neuralnet(data = scaled_exchange_data_ts[1:400], hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
scaled_exchange_data_ts
sc <- as.ts(scaled_exchange_data)
View(sc)
View(nn_best_single)
View(sc)
nn_best_double <- neuralnet(sc, data = sc[1:400], hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
library(neuralnet)
nn_best_double <- neuralnet(sc, data = sc[1:400], hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
View(sc)
View(train_hidden_2)
x <- as.ts(train_hidden_2)
View(x)
set.seed(104)
nn_best_double <- neuralnet(rate ~ rate_1, data = x, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2, n.ahead = 100)
plot(test_hidden_1[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Single Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
nn_best_double.test_prediction <- predict(nn_best_double, n.ahead = 100)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2, n.ahead = 10)
plot(test_hidden_1[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Single Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
# plot graph of best network
plot(test_hidden_2[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_single.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Two Hidden Layers")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
View(nn_best_double.test_prediction)
View(n.net)
View(nn_best_double)
plot(forecast(n.net, h = 100))
lines(scaled_exchange_data_ts[0:500])
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1, n.ahead = 10)
plot(nn_best_single.test_prediction)
plot(nn_best_single.test_prediction, type = "l")
lines(scaled_exchange_data_ts[0:500])
lines(scaled_exchange_data)
lines(train_hidden_1)
plot(nn_best_single.test_prediction, type = "l")
lines(train_hidden_1)
plot(forecast(n.net, h = 100))
lines(scaled_exchange_data_ts[0:500])
plot(forecast(nn_best_single, h = 100))
plot(forecast(n.net, h = 100))
plot(forecast(nn_best_single, h = 100))
View(n.net)
View(nn_best_double)
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1, n.ahead = 100)
plot(nn_best_single)
### BEST SINGLE HIDDEN LAYER NETWORK
set.seed(104)
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1, n.ahead = 100)
plot(nn_best_single)
plot(nn_best_single.test_prediction, type = "l")
lines(train_hidden_1)
lines(train_hidden_1[,1])
lines(test_hidden_1[,1])
plot(nn_best_single.test_prediction, type = "l")
lines(test_hidden_1[,1], col = "red")
x <- as.ts(train_hidden_2)
set.seed(104)
nn_best_double <- neuralnet(rate ~ rate_1, data = x, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, as.ts(test_hidden_2))
plot(nn_best_double.test_prediction, type = "l")
lines(as.ts(test_hidden_2)[,1], col = "red")
mlp_model <- mlp()
library(forecast)
mlp_model <- mlp()
library(nnfor)
install.packages("nnfor")
library(nnfor)
mlp_model <- mlp()
mlp_model <- mlp(scaled_exchange_data_ts[1:400], hd = c(4, 4), lags = 1)
mlp_model <- mlp(as.ts(scaled_exchange_data_ts[1:400]), hd = c(4, 4), lags = 1)
plot(mlp_model)
forecasted <- forecast(mlp_model, h=100)
View(forecasted)
plot(fore)
plot(forecasted)
lines(scaled_exchange_data_ts)
View(mlp_model)
mlp_model[["net"]][["call"]][["data"]][[2]]
mlp_model[["net"]][["call"]]
mlp_model[["net"]][["call"]][["formula"]]
mlp_model[["net"]][["data"]][["X1"]]
mlp_model[["net"]][["data"]][["Y"]]
### BEST TWO HIDDEN LAYER NETWORK
set.seed(104)
nn_best_double <- neuralnet(rate_1 ~ rate, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2)
plot(test_hidden_2[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Two Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
nn_best_double <- neuralnet(rate ~ rate_1, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2)
plot(test_hidden_2[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Two Hidden Layer")
nn_best_double <- neuralnet(formula = frm, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
mlp_model[["net"]][["call"]][["formula"]]
mlp_model[["net"]][["call"]][[1]]
mlp_model[["net"]][["call"]][[1]][[1]]
mlp_model[["net"]][["call"]][[1]][[2]]
mlp_model[["net"]][["call"]][["formula"]]
nn_best_double <- neuralnet::neuralnet(formula = frm, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double <- neuralnet::neuralnet(formula = rate ~ rate_1, data = train_hidden_2, hidden = c(4, 4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_double.test_prediction <- predict(nn_best_double, test_hidden_2)
plot(test_hidden_2[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_double.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Two Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
mlp_model[["net"]][["call"]]
View(train_hidden_2)
View(test_hidden_2)
mlp_model <- mlp(as.ts(train_hidden_2]), hd = c(4, 4), lags = 1)
mlp_model <- mlp(as.ts(train_hidden_2), hd = c(4, 4), lags = 1)
mlp_model <- mlp(as.ts(train_hidden_2[,1]), hd = c(4, 4), lags = 1)
forecasted <- forecast(mlp_model, h=100)
plot(forecasted)
lines(scaled_exchange_data_ts)
mlp_model <- mlp(as.ts(train_hidden_2[,2]), hd = c(4, 4), lags = 1)
forecasted <- forecast(mlp_model, h=100)
plot(forecasted)
lines(scaled_exchange_data_ts)
View(test_hidden_2)
mlp_model[["net"]][["data"]]
mlp_df <- mlp_model[["net"]][["data"]]
View(mlp_df)
View(scaled_exchange_data_hidden_1_shifted)
View(scaled_exchange_data)
View(train_hidden_2)
as.ts(train_hidden_2[,2]
as.ts(train_hidden_2[,2])
as.ts(train_hidden_2[,2])
View(test_hidden_2)
View(test_hidden_1)
times <- as.ts(train_hidden_2[,2])
times
mlp_model <- mlp(times, hd = c(4, 4), lags = 1)
View(mlp_model)
mlp_model[["y"]]
View(nn_best_double)
View(nn_best_single.test_prediction)
mlp_model[["net"]][["data"]]
View(mlp_df)
nn_best_single <- neuralnet(X1 ~ Y, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
View(nn_best_single)
nn_best_single <- neuralnet(Y ~ X1, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single <- neuralnet(Y ~ X1, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
View(nn_best_single)
#nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
frc <- forecast(nn_best_single, h=100)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1[,2])
test_hidden_1[,2]
View(test_hidden_2)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1[,2])
colnames(mlp_df) <- c("rate", "rate_1")
View(mlp_df)
nn_best_single <- neuralnet(rate ~ rate_1, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
# plot graph of best network
plot(test_hidden_1[, 1], type = "l", col = "blue", lwd = 2, xlab = "index", ylab = "Rates")
lines(nn_best_single.test_prediction, type = "l", col = "red", lwd = 2)
title("AR(1) Time Series - Single Hidden Layer")
legend("bottomright", legend = c("Actual", "Predicted"), col = c("blue", "red"), bty = "n", cex=1, lwd = 5, text.font = 7)
times <- as.ts(train_hidden_2[,2])
mlp_model <- mlp(times, hd = c(4, 4), lags = 1)
forecasted <- forecast(mlp_model, h=100)
plot(forecasted)
lines(scaled_exchange_data_ts)
plot(forecasted)
lines(test_hidden_2[, 1])
mlp_model <- mlp(times, hd = c(4), lags = 1)
View(mlp_model)
View(nn_best_single.test_prediction)
View(nn_best_single.test_prediction)
mlp_model[["net"]][["response"]]
install.packages("rsnns")
y
install.packages("RSNNS")
library(RSNNS)
mlp_model <- mlp(as.ts(train_hidden_2[,1]), times, hd = c(4), lags = 1)
View(mlp_model)
forecasted <- forecast(mlp_model, h=100)
x <- predict(mlp_model, test_hidden_2)
x <- predict(mlp_model, test_hidden_2[,2])
mlp_model <- mlp(as.ts(train_hidden_2[,2]), times, hd = c(4), lags = 1)
x <- predict(mlp_model, test_hidden_2[,2])
y_times <-as.ts(train_hidden_2[,1])
mlp_model <- mlp(x = times, y = y_times, hd = c(4), lags = 1)
x <- predict(mlp_model, test_hidden_2[,2])
library(nnfor)
mlp_model <- mlp(x = times, y = y_times, hd = c(4), lags = 1)
x <- predict(mlp_model, test_hidden_2[,2])
View(mlp_model)
mlp_model <- mlp(x = times, y = y_times, hd = c(4), lags = 1)
View(mlp_model)
mlp_model <- mlp(times, hd = c(4), lags = 1)
library(nnfor)
mlp_model <- mlp(times, hd = c(4), lags = 1)
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
library(nnfor)
library(forecast)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_2_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_2_shifted <- scaled_exchange_data_hidden_2_shifted[c(-1)]
train_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[0:400, ])
test_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[401:500, ])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_1_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_1_shifted <- scaled_exchange_data_hidden_1_shifted[c(-1)]
train_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[0:400, ])
test_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[401:500, ])
times <- as.ts(train_hidden_2[,2])
mlp_model <- mlp(times, hd = c(4), lags = 1)
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
library(readxl)
library(neuralnet)
library(fpp2)
library(ggplot2)
library(Metrics)
library(useful)
library(nnfor)
library(forecast)
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_2_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_2_shifted <- scaled_exchange_data_hidden_2_shifted[c(-1)]
train_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[0:400, ])
test_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[401:500, ])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_1_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_1_shifted <- scaled_exchange_data_hidden_1_shifted[c(-1)]
train_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[0:400, ])
test_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[401:500, ])
times <- as.ts(train_hidden_2[,2])
mlp_model <- mlp(times, hd = c(4), lags = 1)
View(mlp_model)
times
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
x <- predict(mlp_model, test_hidden_2[,2])
forecasted <- forecast(mlp_model, h=100)
plot(forecasted)
lines(test_hidden_2[, 1])
# import dataset
exchange_data <- read_excel("../../ExchangeUSD.xlsx")
# remove unneeded days column
exchange_data <- exchange_data[c(-2)]
# convert to time-series, so the date is also in a numeric format
exchange_data <- ts(exchange_data)
exchange_data <- as.data.frame(exchange_data)
# rename col names for easiness
colnames(exchange_data) <- c("date", "rate")
# scale the data
maxs <- apply(exchange_data, 2, max)
mins <- apply(exchange_data, 2, min)
scaled_exchange_data <- as.data.frame(scale(exchange_data, center = mins, scale = maxs - mins))
# plot partial autocorrelation plot to check for optimum order of AR ~ however many orders
# will be tested upon
pacf(scaled_exchange_data[, 2])
# plot the rates to check whether stationary
plot(exchange_data[c(2)])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_2_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_2_shifted <- scaled_exchange_data_hidden_2_shifted[c(-1)]
train_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[0:400, ])
test_hidden_2 <- na.omit(scaled_exchange_data_hidden_2_shifted[401:500, ])
# Optimal Input vector - AR(1)
scaled_exchange_data_hidden_1_shifted <- shift.column(scaled_exchange_data, columns = "rate", newNames = "rate_1", len = 1, up = F)
scaled_exchange_data_hidden_1_shifted <- scaled_exchange_data_hidden_1_shifted[c(-1)]
train_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[0:400, ])
test_hidden_1 <- na.omit(scaled_exchange_data_hidden_1_shifted[401:500, ])
times <- as.ts(train_hidden_2[,2])
mlp_model <- mlp(times, hd = c(4), lags = 1)
x <- predict(mlp_model, test_hidden_2[,2])
forecasted <- forecast(mlp_model, h=100)
plot(forecasted)
lines(test_hidden_2[, 1])
lines(times)
lines(scaled_exchange_data)
lines(scaled_exchange_data[,1])
lines(scaled_exchange_data[,2])
plot(forecasted)
lines(scaled_exchange_data[,2])
View(mlp_model)
View(train_hidden_1)
mlp_model[["y"]]
times <- as.ts(exchange_data[,2])
mlp_model <- mlp(times, hd = c(4), lags = 1)
library(nnfor)
mlp_model <- mlp(times, hd = c(4), lags = 1)
View(mlp_model)
mlp_model[["y"]]
mlp_model[["fitted"]]
View(mlp_model)
train_hidden_2
times <- as.ts(train_hidden_2[,2])
mlp_model <- mlp(times, hd = c(4), lags = 1)
View(mlp_model)
mlp_model[["y"]]
median(mlp_model[["y"]])
mlp_model <- mlp(times, hd = c(4), lags = 1, comb = "mean")
View(mlp_model)
mlp_model <- mlp(times, hd = c(4), lags = 1, comb = "mean")
View(mlp_model)
### BEST SINGLE HIDDEN LAYER NETWORK
set.seed(104)
nn_best_single <- neuralnet(rate ~ rate_1, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
library(neuralnet)
nn_best_single <- neuralnet(rate ~ rate_1, data = mlp_df, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single <- neuralnet(rate ~ rate_1, data = train_hidden_1, hidden = c(4), act.fct = "logistic", err.fct = "sse", lifesign = "full", learningrate = 0.08, rep = 10, linear.output = T)
nn_best_single.test_prediction <- predict(nn_best_single, test_hidden_1)
plot(nn_best_single)
View(nn_best_single)
View(train_hidden_1)
mlp_model <- mlp(times, hd = c(4), lags = 1, comb = "mean", difforder = 0)
View(mlp_model)
mlp_model <- mlp(times, hd = c(4), lags = 1, comb = "mean", difforder = 0)
View(mlp_model)
mlp_model[["difforder"]]
View(mlp_model)
